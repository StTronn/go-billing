// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: billing_metric.sql

package db

import (
	"context"
	"database/sql"
)

const createBillingMetric = `-- name: CreateBillingMetric :execresult
INSERT INTO billing_metric (name, code, aggregation, field_name)
VALUES (?, ?, ?, ?)
`

type CreateBillingMetricParams struct {
	Name        string
	Code        string
	Aggregation BillingMetricAggregation
	FieldName   string
}

func (q *Queries) CreateBillingMetric(ctx context.Context, arg CreateBillingMetricParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createBillingMetric,
		arg.Name,
		arg.Code,
		arg.Aggregation,
		arg.FieldName,
	)
}

const deleteBillingMetric = `-- name: DeleteBillingMetric :exec
DELETE FROM billing_metric
WHERE id = ?
`

func (q *Queries) DeleteBillingMetric(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBillingMetric, id)
	return err
}

const getBillingMetricById = `-- name: GetBillingMetricById :one
SELECT id, name, code, aggregation, field_name
FROM billing_metric
WHERE id = ?
`

func (q *Queries) GetBillingMetricById(ctx context.Context, id int32) (BillingMetric, error) {
	row := q.db.QueryRowContext(ctx, getBillingMetricById, id)
	var i BillingMetric
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Code,
		&i.Aggregation,
		&i.FieldName,
	)
	return i, err
}

const listBillingMetrics = `-- name: ListBillingMetrics :many
SELECT id, name, code, aggregation, field_name
FROM billing_metric
ORDER BY id
`

func (q *Queries) ListBillingMetrics(ctx context.Context) ([]BillingMetric, error) {
	rows, err := q.db.QueryContext(ctx, listBillingMetrics)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BillingMetric
	for rows.Next() {
		var i BillingMetric
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Code,
			&i.Aggregation,
			&i.FieldName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBillingMetric = `-- name: UpdateBillingMetric :execresult
UPDATE billing_metric
SET name = ?, code = ?, aggregation = ?, field_name = ?
WHERE id = ?
`

type UpdateBillingMetricParams struct {
	Name        string
	Code        string
	Aggregation BillingMetricAggregation
	FieldName   string
	ID          int32
}

func (q *Queries) UpdateBillingMetric(ctx context.Context, arg UpdateBillingMetricParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, updateBillingMetric,
		arg.Name,
		arg.Code,
		arg.Aggregation,
		arg.FieldName,
		arg.ID,
	)
}
